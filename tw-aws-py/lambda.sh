#!/bin/bash

if [ "$1" == "" -o "$2" == "" ]; then
  echo "Usage: lambda.sh LambdaName Action"
  echo "Action can be one of:"
  echo "  -c Create a new lambda"
  echo "  -u Update an existing lambda"
  echo "  -p Publish a new version for the lambda"
  echo "  -i Invoke an existing lambda"
  echo "  -m Preview the Lambda code as packaged"
  exit -1
fi

NAME=$1
EXECUTIONROLEARN=arn:aws:iam::213232733909:role/service-role/TWAPIGateWayLambdaRole
SUBNETID1=subnet-cd5e3ebb
SUBNETID2=subnet-01aeda65
SUBNETID3=subnet-8b76c0d3
SECURITYGROUPID=sg-04f1fb05605df6b23
VPCCONFIG=SubnetIds=$SUBNETID1,$SUBNETID2,$SUBNETID3,SecurityGroupIds=$SECURITYGROUPID

if [ "$2" == "-m" ]; then
  echo "Previewing as packaged..."
  cd $NAME
  rm -f preview
  mkdir preview
  cd preview
  unzip ../$NAME.zip
  cat app.py
  cat dal.py
  cd ../..
  exit 0
fi

if [ "$2" == "-i" ]; then
  echo "Invoking..."
  aws lambda invoke --function-name $NAME output.txt
  cat output.txt
  echo .
  exit 0
fi

if [ "$2" == "-p" ]; then
  echo "Publishing..."
  aws lambda publish-version --function-name $NAME
  exit 0
fi

if [ "$2" == "-u" ]; then
  if [ -e $NAME ]; then
    echo "Found existing $NAME"
  else
    echo "Could not find $NAME locally to update to the server. Typo?"
    exit -3
  fi
fi

mkdir -p $NAME

if [ -e $NAME/app.py ]; then
  cd $NAME
  mkdir -p package
  rm -rf package/*
  cd package
  #pip install pymysql --target .
  cp -r ../../lib/psycopg2 .
  rm -f ../$NAME.zip
  zip -r9 ../$NAME.zip .
  cd ..
  echo "Provisioning latest DAL from ../lib"
  cp ../lib/dal.py .
  zip -g $NAME.zip app.py
  zip -g $NAME.zip dal.py
  echo "Ensuring DAL always comes from ../lib"
  rm dal.py
  echo "Do not edit this file. Autoprovisioned from ../lib. Edit that." > dal.py
else
  echo "No app.py found in $NAME. Create the Lambda python code first."
  echo "Use the template below and call your code file app.py. Then run this script again."
  echo "Template for RDS: https://docs.aws.amazon.com/lambda/latest/dg/vpc-rds.html"
  echo "e.g."
  echo "mkdir MyNewLambda"
  echo "cp AnExistingLambda/app.py MyNewLambda/"
  exit -2
fi

if [ "$2" == "-c" ]; then
  echo "Creating..."
  aws lambda create-function --function-name $NAME --runtime python3.7 --zip-file fileb://$NAME.zip --handler app.handler --role $EXECUTIONROLEARN --vpc-config $VPCCONFIG
fi

if [ "$2" == "-u" ]; then
  echo "Updating..."
  aws lambda update-function-code --function-name $NAME --zip-file fileb://$NAME.zip
fi

